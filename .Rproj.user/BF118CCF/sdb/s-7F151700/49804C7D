{
    "contents" : "library(rmongodb)\nlibrary(RTextTools)\nlibrary(e1071)\nlibrary(tm)\nlibrary(plyr)\nlibrary(magrittr)\nsource('utils.R')\n\nmongo <- mongo.create(\"178.62.232.68\")\n\n\n#if(mongo.is.connected(mongo) == TRUE) {\n  db <- \"AIVD\"\n  coll <- \"AIVD.classified\"\n  #mongo.get.database.collections(mongo, db)\n  \n  #mongo.count(mongo, coll)\n  \n  #mongo.find.all(mongo, coll)\n  tweets <- mongo.find.all(mongo, coll,  query='{\"_type\":\"twitter\", \"language\": {\"$exists\": true}}',fields='{\"interaction.content\": 1, \"language.tag\":1, \"classification.allignment\":1, \"_id\":0}', data.frame=TRUE)\n  tweets$langcode <- as.factor(tweets$tag)\n  \n  languageCounts <- sort(table(tweets$langcode), decreasing = TRUE)[0:10]\n  languageCounts <- languageCounts[languageCounts > 10]\n  filteredLanguages <- languages[languages$language_code %in% names(languageCounts),]\n  \n  \n  \n  #tweets$X_type <- as.factor(tweets$X_type)\n  tweets$allignment <- as.factor(tweets$allignment)\n  mtweets <- merge(tweets, filteredLanguages, by.x=c(\"tag\"), by.y=c(\"language_code\"))\n  mtweets$tag <- NULL\n  mtweets <- droplevels(mtweets)\n  \n  mtweets_en <- mtweets[mtweets$language==\"english\",]\n  \n  \n  #pos_tweets =  rbind(\n  #  c('I love this car', 'positive'),\n  #  c('This view is amazing', 'positive'),\n  #  c('I feel great this morning', 'positive'),\n  #  c('I am so excited about the concert', 'positive'),\n  #  c('He is my best friend', 'positive')\n  #)\n  \n  \n  #neg_tweets = rbind(\n  #  c('I do not like this car', 'negative'),\n  #  c('This view is horrible', 'negative'),\n  #  c('I feel tired this morning', 'negative'),\n  #  c('I am not looking forward to the concert', 'negative'),\n  #  c('He is my enemy', 'negative')\n  #)\n  \n  \n  #test_tweets = rbind(\n  #  c('feel happy this morning', 'positive'),\n  #  c('larry friend', 'positive'),\n  #  c('not like that man', 'negative'),\n  #  c('house not great', 'negative'),\n  #  c('your song annoying', 'negative')\n  #)\n  \n  #mtweets_en <- rbind(pos_tweets, neg_tweets, test_tweets)\n  #colnames(mtweets_en) <- c(\"content\",\"allignment\")\n  #mtweets_en <- as.data.frame(mtweets_en, stringsAsFactors=FALSE)\n  #mtweets_en$allignment <- as.factor(mtweets_en$allignment);\n  \n  #matrix <- as.matrix(create_matrix(mtweets[mtweets$language==\"english\",c(\"content\")], \"english\", minDocFreq=1, maxDocFreq=Inf, \n  #                           minWordLength=3, maxWordLength=Inf, ngramLength=1, \n  #                           removeNumbers=TRUE, removePunctuation=TRUE, removeSparseTerms=0, \n  #                           removeStopwords=TRUE,  stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE))\n  \n  \n  \n  mat <- create_matrix(mtweets_en, \"english\", minDocFreq=1, removeStopwords=FALSE, removeNumbers=TRUE,  # we can also removeSparseTerms\n                       stemWords=FALSE, stripWhitespace=TRUE, toLower=TRUE)\n  \n  matrix <- as.matrix(mat)\n  \n  num_tweets = nrow(mtweets_en)\n  \n  sample_size = floor(0.75 * num_tweets)\n  \n  mtweets_train <- head(mtweets_en, sample_size)\n  matrix_train <- head(matrix, sample_size)\n  mtweets_test <- tail(mtweets_en, num_tweets-sample_size)\n  matrix_test <- tail(matrix, num_tweets-sample_size)\n  \n  \n  \n  #train_id <- sample(num_tweets, sample_size)\n  \n  \n  classifier = naiveBayes(matrix_train, mtweets_train$allignment)\n  predicted <- predict(classifier, matrix_test)\n  \n  accuracy <- recall_accuracy(mtweets_test$allignment, predicted)\n  \n  accuracy\n  \n  \n  num_allignment <- as.numeric(mtweets_test$allignment)\n  \n  container = create_container(mat, as.numeric(mtweets_en$allignment), trainSize=1:57, testSize=58:76,virgin=FALSE)\n  \n  models = train_models(container, algorithms=c(\"MAXENT\" , \"SVM\", \"RF\", \"BAGGING\", \"TREE\"))\n  \n  results = classify_models(container, models)\n  \n  table(num_allignment, results[,\"FORESTS_LABEL\"])\n  table(num_allignment, results[,\"MAXENTROPY_LABEL\"])\n  \n  # recall accuracy\n  recall_accuracy(num_allignment, results[,\"FORESTS_LABEL\"])\n  recall_accuracy(num_allignment, results[,\"MAXENTROPY_LABEL\"])\n  recall_accuracy(num_allignment, results[,\"TREE_LABEL\"])\n  recall_accuracy(num_allignment, results[,\"BAGGING_LABEL\"])\n  recall_accuracy(num_allignment, results[,\"SVM_LABEL\"])\n  \n  analytics = create_analytics(container, results)\n  summary(analytics)\n  head(analytics@document_summary)\n  analytics@ensemble_summary\n  \n  N=4\n  set.seed(2014)\n  cross_validate(container,N,\"MAXENT\")\n  cross_validate(container,N,\"TREE\")\n  cross_validate(container,N,\"SVM\")\n  cross_validate(container,N,\"RF\")\n  \n#}",
    "created" : 1454795009550.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1919400576",
    "id" : "49804C7D",
    "lastKnownWriteTime" : 1454812953,
    "path" : "~/Development/R/notsosecret/sentiment.R",
    "project_path" : "sentiment.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}